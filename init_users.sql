-- init_users.sql
-- Creates a `users` table (if not exists) and inserts an initial admin user.
-- Adjust the SQL to match your MySQL/Postgres dialect if necessary.

CREATE DATABASE IF NOT EXISTS airline_db;
USE airline_db;

CREATE TABLE IF NOT EXISTS users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(100) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  role VARCHAR(20) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Change the admin username/password below as desired.
-- NOTE: Password is stored in plain text in this script to match the existing app behavior.
-- For production, replace with a hashed password and update the Java code to verify hashes.
-- The Java DataSeeder now creates/updates the admin user with a secure BCrypt-hashed password.
-- To avoid confusion we no longer insert a plaintext admin here. If you previously executed
-- this script and have a plaintext admin password, the application will migrate it on first login
-- or you can run the Java seeder to update it immediately.

-- If you want to set an initial admin here, use a pre-hashed password generated by BCrypt.

-- -----------------------------------------------------------------
-- Insert a default admin user with a plaintext password (for dev only).
-- The application login handler will migrate plaintext passwords to
-- a BCrypt-hashed password on first successful login (see Login.java).
-- Change 'admin123' to whatever default you prefer.
-- WARNING: Storing plaintext passwords is insecure for production.
-- -----------------------------------------------------------------
INSERT INTO users (username, password, role)
VALUES ('admin', 'admin123', 'Admin')
ON DUPLICATE KEY UPDATE
  password = VALUES(password),
  role = VALUES(role);

-- -----------------------------------------------------------------
-- Bookings table: required by the app when booking flights
-- Minimal schema to support INSERTs from the UI
-- -----------------------------------------------------------------
CREATE TABLE IF NOT EXISTS bookings (
  id INT AUTO_INCREMENT PRIMARY KEY,
  flight_code VARCHAR(50) NOT NULL,
  booking_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  amount DOUBLE NOT NULL
);

-- -----------------------------------------------------------------
-- Trigger: Prevent ticket insert when no seats and decrement seats
-- BEFORE INSERT on `ticket`: checks seats_available in `flight` and
-- decrements it atomically. Raises an error if flight not found or no seats.
-- Copy-paste the block below into MySQL Workbench (DELIMITER needed).
-- -----------------------------------------------------------------
--
-- Example usage in MySQL Workbench (execute as a single script):
-- DELIMITER $$
-- CREATE TRIGGER before_ticket_insert
-- BEFORE INSERT ON ticket
-- FOR EACH ROW
-- BEGIN
--   DECLARE avail INT;
--   SELECT seats_available INTO avail FROM flight WHERE flight_code = NEW.flight_code FOR UPDATE;
--   IF avail IS NULL THEN
--     SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Flight not found (cannot book)';
--   END IF;
--   IF avail <= 0 THEN
--     SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No seats available for this flight';
--   ELSE
--     UPDATE flight SET seats_available = seats_available - 1 WHERE flight_code = NEW.flight_code;
--   END IF;
-- END$$
-- DELIMITER ;


-- -----------------------------------------------------------------
-- Airlines table: used by AddAirline.java and Airlines UI
-- -----------------------------------------------------------------
CREATE TABLE IF NOT EXISTS airlines (
  id INT AUTO_INCREMENT PRIMARY KEY,
  airline_name VARCHAR(255) NOT NULL UNIQUE,
  rating DECIMAL(2,1) DEFAULT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- -----------------------------------------------------------------
-- Payments table: used to record payments for tickets (PNR)
-- Note: no strict foreign key to `ticket` so this can be run even if
-- the `ticket` table is created later. Index on `pnr` speeds lookups.
-- -----------------------------------------------------------------
CREATE TABLE IF NOT EXISTS payments (
  id INT AUTO_INCREMENT PRIMARY KEY,
  pnr VARCHAR(50) NOT NULL,
  amount DOUBLE NOT NULL,
  payment_method VARCHAR(100),
  payment_status VARCHAR(50),
  transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  INDEX (pnr)
);


